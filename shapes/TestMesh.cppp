//
//  TestMesh.cpp
//  OpenGLOtherTest
//
//  Created by Abraham-mac on 7/9/14.
//  Copyright (c) 2014 Abraham-mac. All rights reserved.
//

#include "TestMesh.h"


TestMesh::TestMesh()
{
    if ( !shader->bindShader("shader.vs", GL_VERTEX_SHADER) )
    {
        return;
    }
    
    if ( !shader->bindShader("shader.fs", GL_FRAGMENT_SHADER) )
    {
        return;
    }
    
    shader->linkProgram();
    
    GLfloat data[]{
        
        // first plane
        
//        -1.000000, -0.003433, 1.023117,
//        0.000000, -0.000001, 1.000000,
//        
//         1.000000, -0.003433, 1.023117,
//        0.000000, -0.000001, 1.000000,
//        
//        -1.000000, 1.996567, 1.023118,
//        0.000000, -0.000001, 1.000000,
//        
//         1.000000, 1.996567, 1.023118,
//        0.000000, -0.000001, 1.000000,
//        
//        1.000000, -0.003433, 1.023117,
//        0.000000, -0.000001, 1.000000,
//        
//        1.000000, 1.996567, 1.023118,
//        0.000000, -0.000001, 1.000000,
        
        // second plane
        
//        -1.000000, 0.000000, 1.000000,
//        0.000000, 1.000000, 0.000000,
//        
//        1.000000, 0.000000, 1.000000,
//        0.000000, 1.000000, 0.000000,
//        
//        -1.000000, 0.000000, -1.000000,
//        0.000000, 1.000000, 0.000000,
//        
//        1.000000, 0.000000, -1.000000,
//        0.000000, 1.000000, 0.000000,
//        
//        1.000000, 0.000000, 1.000000,
//        0.000000, 1.000000, 0.000000,
//        
//        1.000000, 0.000000, -1.000000,
//        0.000000, 1.000000, 0.000000
        
        // Triangle 1
//        1.0, 0.0, 0.0,
//        0.0, 0.0, -1.0,
//       -1.0, 0.0, 0.0,
//        0.0, 0.0, -1.0,
//        0.0, 1.0, 0.0,
//        0.0, 0.0, -1.0,
        
        // triangle 2
        
        // cube
//        -0.610433, -0.610433, 0.610433,   // v1
//        -1.000000, 0.000000, 0.000000,    // n1
//        -0.610433, -0.610433, -0.610433,  // v2
//        -1.000000, 0.000000, 0.000000,    // n1
//         0.610433, -0.610433, -0.610433,  // v3
//        0.000000, 0.000000, -1.000000,    // n2
//         0.610433, -0.610433, 0.610433,   // v4
//        1.000000, 0.000000, 0.000000,     // n3
//        -0.610433, 0.610433, 0.610433,    // v5
//        0.000000, 0.000000, 1.000000,     // n4
//        -0.610433, 0.610433, -0.610433,   // v6
//        -1.000000, 0.000000, 0.000000,    // n1
//         0.610433, 0.610433, -0.610433,   // v7
//         0.000000, 0.000000, -1.000000,   // n2
//         0.610433, 0.610433, 0.610433,    // v8
//        1.000000, 0.000000, 0.000000,     // n3
//        -0.610433, -0.610433, -0.610433,  // v9 - copy of v2
//        0.000000, 0.000000, -1.000000,    // n2
//        0.610433, -0.610433, -0.610433,   // v10 - copy of v3
//        1.000000, 0.000000, 0.000000,     // n3
//        -0.610433, -0.610433, 0.610433,   // v11 - copy of v1
//        0.000000, 0.000000, 1.000000,     // n4
//        0.610433, -0.610433, 0.610433,    // v12 - copy of v4
//        0.000000, 0.000000, 1.000000,     // n4
//        -0.610433, -0.610433, -0.610433,  // v13 = copy of v2
//        0.000000, -1.000000, 0.000000,    // n5
//        0.610433, -0.610433, -0.610433,   // v14 - copy of v3
//        0.000000, -1.000000, 0.000000,    // n5
//        0.610433, -0.610433, 0.610433,    // v15 - copy of v4
//        0.000000, -1.000000, 0.000000,    // n5
//        0.610433, 0.610433, -0.610433,    // v16 - copy of v7
//        0.000000, 1.000000, 0.000000,     // n6
//        -0.610433, 0.610433, -0.610433,   // v17 - copy of v6
//        0.000000, 1.000000, 0.000000,     // n6
//        -0.610433, 0.610433, 0.610433,    // v18 - copy of v5
//        0.000000, 1.000000, 0.000000,     // n6
//        -0.610433, 0.610433, 0.610433,    // v19 - copy of v5
//        -1.000000, 0.000000, 0.000000,    // n1
//        -0.610433, 0.610433, -0.610433,   // v20 - copy of v6
//        -1.000000, 0.000000, 0.000000,    // n1
//        -0.610433, -0.610433, 0.610433,   // v21 - copy of v1
//        -1.000000, 0.000000, 0.000000,    // n1
//        -0.610433, 0.610433, -0.610433,   // v22 - copy of v6
//        0.000000, 0.000000, -1.000000,    // n2
//        0.610433, 0.610433, -0.610433,    // v23 - copy of v7
//        0.000000, 0.000000, -1.000000,    // n2
//        -0.610433, -0.610433, -0.610433,  // v24 - copy of v2
//        0.000000, 0.000000, -1.000000,    // n2
//        0.610433, 0.610433, -0.610433,    // v25 - copy of v7
//        1.000000, 0.000000, 0.000000,     // n3
//        0.610433, 0.610433, 0.610433,     // v26 - copy of v8 ???? should be v8
//        1.000000, 0.000000, 0.000000,     // n3
//        0.610433, -0.610433, -0.610433,   // v27 - copy of v3
//        1.000000, 0.000000, 0.000000,     // n3
//        0.610433, 0.610433, 0.610433,     // v28 - copy of v8
//        0.000000, 0.000000, 1.000000,     // n4
//        -0.610433, 0.610433, 0.610433,    // v29 - copy of v5
//        0.000000, 0.000000, 1.000000,     // n4
//        0.610433, -0.610433, 0.610433,    // v30 - copy of v4
//        0.000000, 0.000000, 1.000000,     // n4
//        -0.610433, -0.610433, 0.610433,   // v31 - copy of v1
//        0.000000, -1.000000, 0.000000,    // n5
//        -0.610433, -0.610433, -0.610433,  // v32 - copy of v2
//        0.000000, -1.000000, 0.000000,    // n5
//        0.610433, -0.610433, 0.610433,    // v33 - copy of v4
//        0.000000, -1.000000, 0.000000,    // n5
//        0.610433, 0.610433, 0.610433,    // v34 - copy of v8
//        0.000000, 1.000000, 0.000000,     // n6
//        0.610433, 0.610433, -0.610433,   // v35 - copy of v7
//        0.000000, 1.000000, 0.000000,     // n6
//        -0.610433, 0.610433, 0.610433,    // v36 - copy of v5
//        0.000000, 1.000000, 0.000000     // n6
        
//        // sorted cube
//        -0.610433, -0.610433, 0.610433,   // v1
//        -1.000000, 0.000000, 0.000000,    // n1
//        -0.610433, -0.610433, -0.610433,  // v2
//        -1.000000, 0.000000, 0.000000,    // n1
//        0.610433, -0.610433, -0.610433,  // v3
//        0.000000, 0.000000, -1.000000,    // n2
//        0.610433, -0.610433, 0.610433,   // v4
//        1.000000, 0.000000, 0.000000,     // n3
//        -0.610433, 0.610433, 0.610433,    // v5
//        0.000000, 0.000000, 1.000000,     // n4
//        -0.610433, 0.610433, -0.610433,   // v6
//        -1.000000, 0.000000, 0.000000,    // n1
//        0.610433, 0.610433, -0.610433,   // v7
//        0.000000, 0.000000, -1.000000,   // n2
//        0.610433, 0.610433, 0.610433,    // v8
//        1.000000, 0.000000, 0.000000,     // n3
//        -0.610433, -0.610433, -0.610433,  // v9 - copy of v2
//        0.000000, 0.000000, -1.000000,    // n2
//        0.610433, -0.610433, -0.610433,   // v10 - copy of v3
//        1.000000, 0.000000, 0.000000,     // n3
//        -0.610433, -0.610433, 0.610433,   // v11 - copy of v1
//        0.000000, 0.000000, 1.000000,     // n4
//        0.610433, -0.610433, 0.610433,    // v12 - copy of v4
//        0.000000, 0.000000, 1.000000,     // n4
//        -0.610433, -0.610433, -0.610433,  // v13 = copy of v2
//        0.000000, -1.000000, 0.000000,    // n5
//        0.610433, -0.610433, -0.610433,   // v14 - copy of v3
//        0.000000, -1.000000, 0.000000,    // n5
//        0.610433, -0.610433, 0.610433,    // v15 - copy of v4
//        0.000000, -1.000000, 0.000000,    // n5
//        0.610433, 0.610433, -0.610433,    // v16 - copy of v7
//        0.000000, 1.000000, 0.000000,     // n6
//        -0.610433, 0.610433, -0.610433,   // v17 - copy of v6
//        0.000000, 1.000000, 0.000000,     // n6
//        -0.610433, 0.610433, 0.610433,    // v18 - copy of v5
//        0.000000, 1.000000, 0.000000,     // n6
//        -0.610433, 0.610433, 0.610433,    // v19 - copy of v5
//        -1.000000, 0.000000, 0.000000,    // n1
//        //-0.610433, 0.610433, -0.610433,   // v20 - copy of v6 ???? should be v6
//        //-1.000000, 0.000000, 0.000000,    // n1
//        //-0.610433, -0.610433, 0.610433,   // v21 - copy of v1 ???? should be v1
//        //-1.000000, 0.000000, 0.000000,    // n1
//        -0.610433, 0.610433, -0.610433,   // v22 - copy of v6
//        0.000000, 0.000000, -1.000000,    // n2
//        //0.610433, 0.610433, -0.610433,    // v23 - copy of v7 ???? should be v7
//        //0.000000, 0.000000, -1.000000,    // n2
//        //-0.610433, -0.610433, -0.610433,  // v24 - copy of v2 ???? should be v9
//        //0.000000, 0.000000, -1.000000,    // n2
//        0.610433, 0.610433, -0.610433,    // v25 - copy of v7
//        1.000000, 0.000000, 0.000000,     // n3
//        //0.610433, 0.610433, 0.610433,     // v26 - copy of v8 ???? should be v8
//        //1.000000, 0.000000, 0.000000,     // n3
//        //0.610433, -0.610433, -0.610433,   // v27 - copy of v3 ???? should be v10
//        //1.000000, 0.000000, 0.000000,     // n3
//        //0.610433, 0.610433, 0.610433,     // v28 - copy of v8
//        //0.000000, 0.000000, 1.000000,     // n4
//        //-0.610433, 0.610433, 0.610433,    // v29 - copy of v5 ???? should be v5
//        //0.000000, 0.000000, 1.000000,     // n4
//        //0.610433, -0.610433, 0.610433,    // v30 - copy of v4 ???? should be v12
//        //0.000000, 0.000000, 1.000000,     // n4
//        -0.610433, -0.610433, 0.610433,   // v31 - copy of v1
//        0.000000, -1.000000, 0.000000,    // n5
//        //-0.610433, -0.610433, -0.610433,  // v32 - copy of v2 ???? should be v13
//        //0.000000, -1.000000, 0.000000,    // n5
//        //0.610433, -0.610433, 0.610433,    // v33 - copy of v4 ???? should be v15
//        //0.000000, -1.000000, 0.000000,    // n5
//        0.610433, 0.610433, 0.610433,    // v34 - copy of v8
//        0.000000, 1.000000, 0.000000,     // n6
//        //0.610433, 0.610433, -0.610433,   // v35 - copy of v7 ???? should be v16
//        //0.000000, 1.000000, 0.000000,     // n6
//        //-0.610433, 0.610433, 0.610433,    // v36 - copy of v5 ???? should be v18
//        //0.000000, 1.000000, 0.000000     // n6
        
        // normals
        
        // sorted cube
        -0.610433, -0.610433, 0.610433,   // v1
        -1.000000, 0.000000, 0.000000,    // n1
        -0.610433, -0.610433, -0.610433,  // v2
        -1.000000, 0.000000, 0.000000,    // n1
        0.610433, -0.610433, -0.610433,  // v3
        0.000000, 0.000000, -1.000000,    // n2
        0.610433, -0.610433, 0.610433,   // v4
        1.000000, 0.000000, 0.000000,     // n3
        -0.610433, 0.610433, 0.610433,    // v5
        0.000000, 0.000000, 1.000000,     // n4
        -0.610433, 0.610433, -0.610433,   // v6
        -1.000000, 0.000000, 0.000000,    // n1
        0.610433, 0.610433, -0.610433,   // v7
        0.000000, 0.000000, -1.000000,   // n2
        0.610433, 0.610433, 0.610433,    // v8
        1.000000, 0.000000, 0.000000,     // n3
        -0.610433, -0.610433, -0.610433,  // v9 - copy of v2
        0.000000, 0.000000, -1.000000,    // n2
        0.610433, -0.610433, -0.610433,   // v10 - copy of v3
        1.000000, 0.000000, 0.000000,     // n3
        -0.610433, -0.610433, 0.610433,   // v11 - copy of v1
        0.000000, 0.000000, 1.000000,     // n4
        0.610433, -0.610433, 0.610433,    // v12 - copy of v4
        0.000000, 0.000000, 1.000000,     // n4
        -0.610433, -0.610433, -0.610433,  // v13 = copy of v2
        0.000000, -1.000000, 0.000000,    // n5
        0.610433, -0.610433, -0.610433,   // v14 - copy of v3
        0.000000, -1.000000, 0.000000,    // n5
        0.610433, -0.610433, 0.610433,    // v15 - copy of v4
        0.000000, -1.000000, 0.000000,    // n5
        0.610433, 0.610433, -0.610433,    // v16 - copy of v7
        0.000000, 1.000000, 0.000000,     // n6
        -0.610433, 0.610433, -0.610433,   // v17 - copy of v6
        0.000000, 1.000000, 0.000000,     // n6
        -0.610433, 0.610433, 0.610433,    // v18 - copy of v5
        0.000000, 1.000000, 0.000000,     // n6
        -0.610433, 0.610433, 0.610433,    // v19 - copy of v5
        -1.000000, 0.000000, 0.000000,    // n1
        -0.610433, 0.610433, -0.610433,   // v20 - v22 - copy of v6
        0.000000, 0.000000, -1.000000,    // n2
        0.610433, 0.610433, -0.610433,    // v21 - v25 - copy of v7
        1.000000, 0.000000, 0.000000,     // n3
        0.610433, 0.610433, 0.610433,     // v22 - v28 - copy of v8
        0.000000, 0.000000, 1.000000,     // n4
        -0.610433, -0.610433, 0.610433,   // v23 - v31 - copy of v1
        0.000000, -1.000000, 0.000000,    // n5
        0.610433, 0.610433, 0.610433,     // v24 - v34 - copy of v8
        0.000000, 1.000000, 0.000000,     // n6
        
    };
    
    
    GLushort indices[]{
        
        // first plane
//        1, 3, 2,
//        0, 4, 5,
//        
//        // second plane
//        7, 9, 8,
//        6, 10, 11
        
        // triangle 1
//        0, 1, 2
        
        // cube
//      5, 1, 0, 6, 2, 8, 7, 3, 9, 4, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35
      5, 1, 0, 6, 2, 8, 7, 3, 9, 4, 10, 11, 12, 13, 14, 15, 16, 17, 18, 5, 0, 19, 6, 8, 20, 7, 9, 21, 4, 11, 22, 12, 14, 23, 15, 17
    };
    
    nr_groups = 2;
    
    //gen buffers
    glGenBuffers(nr_groups, VBO);
    
    glBindBuffer(GL_ARRAY_BUFFER, VBO[POSITIONS_BUFF]);
    glBufferData(GL_ARRAY_BUFFER, sizeof(data), data, GL_STATIC_DRAW);
    
    // vertex arrays
    VAO = new GLuint[nr_groups];
    glGenVertexArrays(nr_groups, VAO);
    
    glBindVertexArray(VAO[0]);
    positionLoc = shader->getAttribute( "position" );
    glEnableVertexAttribArray(positionLoc);
    glVertexAttribPointer(positionLoc, 3, GL_FLOAT, GL_FALSE, 6*sizeof(GLfloat), 0);

    // normals
    normalLoc = shader->getAttribute( "normal" );
    glEnableVertexAttribArray(normalLoc);
    glVertexAttribPointer(normalLoc, 3, GL_FLOAT, GL_FALSE, 6*sizeof(GLfloat), (GLvoid*)( (3*sizeof(GLfloat)) ));
    
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, VBO[INDEX_BUFF]);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indices), indices, GL_STATIC_DRAW);
}

void TestMesh::draw(glm::mat4 m_transform)
{
    shader->use();
    
    if ( !shader->validateProgram() )
    {
        printf( "error with programs" );
        return;
    }
    
    glUniformMatrix4fv(uniform_m_transform, 1, GL_FALSE, glm::value_ptr(m_transform));
    
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, VBO[INDEX_BUFF]);
    glBindVertexArray(VAO[0]);
    
    GLuint offset = 0;
    for ( int i = 0; i < 1; i++)
    {
        //glPolygonMode(GL_FRONT_AND_BACK, GL_LINE_LOOP);
        glDrawElements(GL_TRIANGLES, 36, GL_UNSIGNED_SHORT, (GLvoid*)offset);
        offset = 6*sizeof(GLushort);
    }
}

void TestMesh::transform( glm::mat4 m_transform )
{
    
}